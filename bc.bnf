G = { Vn, Vt, P, <program> };

Vn = {
	<NUMBER>, <INTEGER>, <program>, <input_item>, <break_list>,
	<function_def>, <statement>, <opt_args_list>, <opt_auto_defs_list>,
	<statement_list>, <args_list>, <defs_list>, <expression>, <STRING>,
	<named_var>, <relational>, <opt_exp_list>, <assignment>,
	<plus_minus>, <mult>, <power>, <minus>, <unary_minus>, <inc_dec>
}

Vt = {
	<NL>, <PLUS>, <MINUS>, <POWER>, <INC_DEC>, <MULT_OP>, <RELATION>, <ASSIGNMENT>, <DIGIT>, <LETTER>, <EOF>
}

P = {

<NL>           ::= ‘\n’
<PLUS>         ::= ‘+’
<MINUS>        ::= ‘-’
<POWER>        ::= ‘^’
<INC_DEC>      ::= ‘++’ | ‘--’
<MULT_OP>      ::= ‘*’  | ‘/’  | ’%’
<RELATION>     ::= ‘==’ | ‘<=’ | ‘>=’ | ’!=’ | ’<’  | ’>’
<ASSIGNMENT>   ::= ‘=’  | ‘+=’ | ’-=’ | ’*=’ | ’/=’ | ’%=’ | ’^=’

<NUMBER> ::= <INTEGER>
    | <INTEGER> ‘.’
    | ‘.’ <INTEGER>
    | <INTEGER> ‘.’ <INTEGER>

<INTEGER> ::= <DIGIT>
    | <INTEGER> <DIGIT>

<DIGIT> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
          | 8 | 9 | A | B | C | D | E | F

<LETTER> ::= a | b | c | d | e | f | g | h | i | j | k | l | m
           | n | o | p | q | r | s | t | u | v | w | x | y | z

<program> ::= <EOF>
    | <input_item> <program>

<input_item> ::= <break_list> <NL>
    | <function_def>

<break_list> ::= // empty
    | <statement>
    | <break_list> ‘;’
    | <break_list> ‘;’ <statement>

<function_def> ::= ‘define’ <LETTER> ‘(‘ <opt_args_list> ‘)’ ‘{‘ <NL>
                <opt_auto_defs_list>
                <statement_list>
                ‘}’

<opt_args_list> ::= // empty
    | <args_list>

<args_list> ::= <LETTER>
    | <args_list> ‘,’ <LETTER>


<opt_auto_defs_list> ::= // empty
    | ‘auto’ <defs_list> <NL>
    | ‘auto’ <defs_list> ‘;’


<defs_list> ::= <LETTER>
    | <LETTER> ‘[‘ ‘]’
    | ‘defs_list’, <LETTER>
    | ‘defs_list’, <LETTER> ‘[‘ ‘]’

<statement_list> ::= // empty
    | <statement>
    | <statement_list> <NL>
    | <statement_list> ‘;’
    | <statement_list> <NL> <statement>
    | <statement_list> ‘;’ <statement>

<statement> ::= <expression>
    | ‘{‘ <statement_list> ‘}’
    | ‘if’ ‘(‘<expression>‘)’<statement>
    | ‘while’ ‘(‘<expression>‘)’<statement>
    | ‘for’ ‘(‘<expression>’;’<expression>’;’<expression>’)’<statement>
    | <STRING>
    | ‘quit’
    | ‘break’
    | ‘return’
    | ‘return’ ‘(‘ <expression> ‘)’

<expression> ::= <NUMBER>
    | <named_var>
    | <relational>
    | ‘(‘ <expression> ‘)’
    | LETTER ‘(‘ <opt_exp_list> ‘)’
    | ‘length’ ‘(‘ <expression> ‘)’
    | ‘scale’ ‘(‘ <expression> ‘)’
    | ‘sqrt’ ‘(‘ <expression> ‘)’

<opt_exp_list> ::= // empty
    | <expression>
    | <opt_exp_list> ‘,’ <expression>

<relational> ::= <assignment> <RELATION> <relational>
    | <assignment>

<assignment> ::= <named_var> <ASSIGNMENT> <assignment>
    | <plus_minus>

<plus_minus> ::= <mult> <PLUS> <plus_minus>
    | <mult> <MINUS> <plus_minus>
    | <mult>

<mult> ::= <power> <MULT_OP> <mult>
    | <power>

<power> ::= <minus> <POWER> <power>
    | <unary_minus>

<unary_minus> ::= <MINUS> <inc_dec>
    | <inc_dec>

<inc_dec> ::= <INC_DEC> <named_var>
    | <named_var> <INC_DEC>
    | <expression>

<named_var> ::= <LETTER>
    | <LETTER> ‘[‘ <expression> ‘]’
    | ‘scale’
    | ‘ibase’
    | ‘obase’
}
