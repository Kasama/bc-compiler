/* vim: set ts=4 sw=4 noexpandtab syntax=yacc: */

/* P1 */
<bc> ::= (<comando> | <definição de função>)* <EOF>

/* P2 */
<comando> ::= <E>
	| <comando_composto>
	| <IF>
	| <WHILE>
	| <FOR>
	| <NULL>
	| <BREAK>
	| <CONTNUE>
	| <QUIT>
	| <PRINT>
	| <STRING>
	| <RETURN>

<comando_composto> ::= "{" <ListaComandos>" }"

<ListaComandos> ::= <comando> ( <separador> <comando> )*

<separador> ::= ; | \ n

<IF> ::= if ( <E> ) <comando> [else <comando>]

<WHILE> ::= while ( <E> ) <comando>

<FOR> ::= for ( [<E>] ; [<E>] ; [<E>] ) <comando>

<NULL> ::= <separador>

<BREAK> ::= break

<CONTINUE> ::= continue

<QUIT> ::= quit

<PRINT> ::= print <ListaExpressoes>

<ListaExpressoes> ::= <E> ( , <E>)*

<RETORNO> ::= return [ <E> ]

/* P3 */
<E> ::= <E1> (|| <E1>)*
<E1> ::= <E2> (&& <E2>)*
<E2> ::= [!] <E3>
<E3> ::= <E4> [ (== | <= | >= | != | <  | >  ) <E4> ]
<E4> ::= (<ID> [ [ <E> ] ] ((++ | --) | ( = | + = | -= | *= | /= | %= | ^= ) <E4>)) | <E5>
<E5> ::= <E6> ( (+ | -) <E6> )*
<E6> ::= <E7> ( (* | / | % ) <E7> )*
<E7> ::= <E8> [(^ <E7>)]
<E8> ::= [ - ] <E9>
<E9> ::= ( ++ | -- ) <ID> [ [ <E> ] ] | <E10>
<E10> ::= <INT>
	| <FLOAT>
	| ( <E> )
	| sqrt ( <E> )
	| length ( <E> )
	| scale ( <E> )
	| <chamada_funcao>
	| <ID> [ [ <E> ] ]
	| ibase | obase | scale | last | .
	| s (<E>)
	| c (<E>)
	| e (<E>)
	| l (<E>)
	| a (<E>)
	| j (<E> , <E>)

<chamada_funcao> ::= <ID> ( [ <ListaExpressoes> ] )

/* P4 */
<definicao_de_funcao> ::= define <ID> ( [ <ListaVar> ] ) {
	[ auto <ListaVar> ]
	<ListaComandos>
}

<ListaVar> ::= <ID> [ [ ] ] ( , <ID> [ [ ] ] )*

