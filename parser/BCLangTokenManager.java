/* BCLangTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. BCLangTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class BCLangTokenManager implements BCLangConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000L) != 0L)
            return 26;
         if ((active0 & 0x2200000000000L) != 0L)
            return 12;
         if ((active0 & 0x1010000000L) != 0L)
            return 3;
         if ((active0 & 0x484dd40000000000L) != 0L)
            return 15;
         if ((active0 & 0x37b0030000000000L) != 0L)
         {
            jjmatchedKind = 70;
            return 15;
         }
         if ((active0 & 0xf0c000000L) != 0L)
            return 33;
         if ((active0 & 0x2000L) != 0L)
            return 34;
         return -1;
      case 1:
         if ((active0 & 0x7fe0370000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
            return 15;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x7fc0370000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
            return 15;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 15;
         return -1;
      case 3:
         if ((active0 & 0x1840100000000000L) != 0L)
            return 15;
         if ((active0 & 0x6780270000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
            return 15;
         }
         return -1;
      case 4:
         if ((active0 & 0x6200200000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
            return 15;
         }
         if ((active0 & 0x580070000000000L) != 0L)
            return 15;
         return -1;
      case 5:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
            return 15;
         }
         if ((active0 & 0x2200200000000000L) != 0L)
            return 15;
         return -1;
      case 6:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
            return 15;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 13, 34);
      case 37:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 40:
         return jjStopAtPos(0, 4);
      case 41:
         return jjStopAtPos(0, 5);
      case 42:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 43:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x900000000L);
      case 44:
         return jjStopAtPos(0, 12);
      case 45:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 14, 26);
      case 47:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 59:
         return jjStopAtPos(0, 10);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 61:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 62:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 91:
         return jjStopAtPos(0, 8);
      case 93:
         return jjStopAtPos(0, 9);
      case 94:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 97:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L);
      case 99:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 101:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10010000000000L);
      case 106:
         return jjStartNfaWithStates_0(0, 51, 15);
      case 108:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 115:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x140000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 43:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 45:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 61:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200200000000000L);
      case 102:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 15);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x500000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L);
      case 124:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x70000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1180000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000200000000000L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 15);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80040000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 111:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 15);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 15);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 15);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 15);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 15);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 15);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L);
      case 107:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 15);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 15);
         break;
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 15);
         break;
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(15); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAddStates(0, 3); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  else if (curChar == 46)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(26); }
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  else if (curChar == 46)
                     { jjCheckNAdd(26); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAddTwoStates(22, 23); }
                  }
                  break;
               case 34:
                  if ((0x7fffffe300000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 34)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 3:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 8:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 16:
                  if (curChar == 34)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 17:
                  if ((0x7fffffe300000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 20:
                  if (curChar == 34 && kind > 71)
                     kind = 71;
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar == 46 && kind > 69)
                     kind = 69;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar == 46)
                     { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(26); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAddStates(0, 3); }
                  break;
               case 31:
                  if (curChar == 59 && kind > 15)
                     kind = 15;
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(26); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(15); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(15); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(13, 14); }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 34:
                  if ((0x3ffffffee8000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 1:
                  { jjAddStates(15, 16); }
                  break;
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
               case 7:
                  { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 10:
                  if (curChar == 116 && kind > 43)
                     kind = 43;
                  break;
               case 11:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(15); }
                  break;
               case 17:
                  if ((0x3ffffffee8000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 18:
                  if (curChar == 110)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 28:
                  if (curChar == 92)
                     { jjAddStates(13, 14); }
                  break;
               case 29:
                  if (curChar == 110 && kind > 15)
                     kind = 15;
                  break;
               case 30:
                  if (curChar == 110 && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 24, 25, 22, 24, 25, 17, 19, 20, 5, 6, 8, 29, 30, 1, 
   2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\75", "\54", "\42", "\56", null, null, "\46\46", "\174\174", "\41", "\76", "\74", 
"\76\75", "\74\75", "\75\75", "\41\75", "\55", "\53", "\57", "\52", "\45", "\136", 
"\53\53", "\55\55", "\55\75", "\53\75", "\57\75", "\52\75", "\45\75", "\136\75", 
"\151\142\141\163\145", "\157\142\141\163\145", "\163\143\141\154\145", null, "\163\161\162\164", 
"\154\145\156\147\164\150", "\163", "\143", "\145", "\154", "\141", "\152", "\151\146", "\146\157\162", 
"\145\154\163\145", "\167\150\151\154\145", "\160\162\151\156\164", "\144\145\146\151\156\145", 
"\142\162\145\141\153", "\141\165\164\157", "\161\165\151\164", "\162\145\164\165\162\156", 
"\143\157\156\164\151\156\165\145", null, null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public BCLangTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public BCLangTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 33; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffffffff1L, 0xe0L, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[33];
    static private final int[] jjstateSet = new int[2 * 33];

    
    static protected int curChar;
}
