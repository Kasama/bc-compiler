/* BCLang.java */
/* Generated By:JavaCC: Do not edit this line. BCLang.java */
        public class BCLang implements BCLangConstants {

                public static void main(String[] args) {

                        try {
                                (new BCLang(new java.io.StringReader(args[0]))).bc();
                                System.out.println("Syntax good, mate");
                        } catch (Throwable e) {
                                System.out.println("Failure: " + e.getMessage());
                        }
                }

  static final public void bc() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:
      case LBRACK:
      case DOT:
      case NULL:
      case NOT:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case IBASE:
      case OBASE:
      case SCALE:
      case LAST:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_L:
      case FUNC_A:
      case FUNC_J:
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case DEFINE:
      case BREAK:
      case QUIT:
      case RETURN:
      case CONTINUE:
      case NUMBER:
      case ID:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:
      case LBRACK:
      case DOT:
      case NULL:
      case NOT:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case IBASE:
      case OBASE:
      case SCALE:
      case LAST:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_L:
      case FUNC_A:
      case FUNC_J:
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case BREAK:
      case QUIT:
      case RETURN:
      case CONTINUE:
      case NUMBER:
      case ID:
      case STRING:{
        command();
        break;
        }
      case DEFINE:{
        function_def();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case DOT:
    case NOT:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      expression();
      break;
      }
    case IF:{
      if_statement();
      break;
      }
    case FOR:{
      for_statement();
      break;
      }
    case WHILE:{
      while_statement();
      break;
      }
    case PRINT:{
      print_statement();
      break;
      }
    case RETURN:{
      return_statement();
      break;
      }
    case LBRACK:{
      composite_command();
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
      break;
      }
    case BREAK:{
      jj_consume_token(BREAK);
      break;
      }
    case CONTINUE:{
      jj_consume_token(CONTINUE);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case QUIT:{
      jj_consume_token(QUIT);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void composite_command() throws ParseException {
    jj_consume_token(LBRACK);
    command_list();
    jj_consume_token(RBRACK);
  }

  static final public void command_list() throws ParseException {
    command();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEP:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEP);
      command();
    }
  }

  static final public void if_statement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    expression();
    jj_consume_token(RPAR);
    command();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      command();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void for_statement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case DOT:
    case NOT:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      expression();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case DOT:
    case NOT:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      expression();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case DOT:
    case NOT:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      expression();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    command();
  }

  static final public void while_statement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(RPAR);
    expression();
    jj_consume_token(LPAR);
    command();
  }

  static final public void print_statement() throws ParseException {
    jj_consume_token(PRINT);
    expression_list();
  }

  static final public void return_statement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case DOT:
    case NOT:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      expression();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void expression_list() throws ParseException {
    expression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      expression();
    }
  }

  static final public void expression() throws ParseException {
    E1();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      E1();
    }
  }

// boa_sorte: begin
  static final public void E1() throws ParseException {
    E2();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      E2();
    }
  }

  static final public void E2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    E3();
  }

  static final public void E3() throws ParseException {
    E4();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:
    case LT:
    case GTE:
    case LTE:
    case EQUAL:
    case DIFF:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case LTE:{
        jj_consume_token(LTE);
        break;
        }
      case GTE:{
        jj_consume_token(GTE);
        break;
        }
      case DIFF:{
        jj_consume_token(DIFF);
        break;
        }
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E4();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:{
      named_var();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUSPLUS:
      case MINUSMINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUSPLUS:{
          jj_consume_token(PLUSPLUS);
          break;
          }
        case MINUSMINUS:{
          jj_consume_token(MINUSMINUS);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ASSIGN:
      case MINUS_ASSIGN:
      case PLUS_ASSIGN:
      case DIV_ASSIGN:
      case MUL_ASSIGN:
      case MOD_ASSIGN:
      case POW_ASSIGN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          break;
          }
        case PLUS_ASSIGN:{
          jj_consume_token(PLUS_ASSIGN);
          break;
          }
        case MINUS_ASSIGN:{
          jj_consume_token(MINUS_ASSIGN);
          break;
          }
        case MUL_ASSIGN:{
          jj_consume_token(MUL_ASSIGN);
          break;
          }
        case DIV_ASSIGN:{
          jj_consume_token(DIV_ASSIGN);
          break;
          }
        case MOD_ASSIGN:{
          jj_consume_token(MOD_ASSIGN);
          break;
          }
        case POW_ASSIGN:{
          jj_consume_token(POW_ASSIGN);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        E4();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case LPAR:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case SCALE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:{
      E5();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void E5() throws ParseException {
    E6();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E6();
    }
  }

  static final public void E6() throws ParseException {
    E7();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIV:
      case MUL:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        jj_consume_token(MUL);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E7();
    }
  }

  static final public void E7() throws ParseException {
    E8();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POWER:{
      jj_consume_token(POWER);
      E7();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  static final public void E8() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    E9();
  }

  static final public void E9() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUSPLUS:{
        jj_consume_token(PLUSPLUS);
        break;
        }
      case MINUSMINUS:{
        jj_consume_token(MINUSMINUS);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      named_var();
      break;
      }
    case LPAR:
    case DOT:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      E10();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void E10() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case DOT:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:{
      named_var();
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case SQRT:{
      jj_consume_token(SQRT);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case LENGTH:{
      jj_consume_token(LENGTH);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case SCALE:{
      jj_consume_token(SCALE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        jj_consume_token(LPAR);
        expression();
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
      }{
      jj_consume_token(ID);
      function_call_or_array();
      break;
      }
    case FUNC_S:{
      jj_consume_token(FUNC_S);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case FUNC_C:{
      jj_consume_token(FUNC_C);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case FUNC_E:{
      jj_consume_token(FUNC_E);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case FUNC_L:{
      jj_consume_token(FUNC_L);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case FUNC_A:{
      jj_consume_token(FUNC_A);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    case FUNC_J:{
      jj_consume_token(FUNC_J);
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(COMMA);
      expression();
      jj_consume_token(RPAR);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void function_call_or_array() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:
      case DOT:
      case NOT:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case IBASE:
      case OBASE:
      case SCALE:
      case LAST:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_L:
      case FUNC_A:
      case FUNC_J:
      case NUMBER:
      case ID:{
        expression_list();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQ_BRACK:{
        jj_consume_token(LSQ_BRACK);
        expression();
        jj_consume_token(RSQ_BRACK);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    }
  }

  static final public void function_def() throws ParseException {
    jj_consume_token(DEFINE);
    jj_consume_token(ID);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case DOT:
    case NOT:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case IBASE:
    case OBASE:
    case SCALE:
    case LAST:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_L:
    case FUNC_A:
    case FUNC_J:
    case NUMBER:
    case ID:{
      expression_list();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AUTO:{
      jj_consume_token(AUTO);
      auto_list();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    command_list();
    jj_consume_token(RBRACK);
  }

  static final public void auto_list() throws ParseException {
    named_var();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQ_BRACK:{
        jj_consume_token(LSQ_BRACK);
        jj_consume_token(RSQ_BRACK);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    }
  }

  static final public void named_var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQ_BRACK:{
        jj_consume_token(LSQ_BRACK);
        expression();
        jj_consume_token(RSQ_BRACK);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      break;
      }
    case LAST:{
      jj_consume_token(LAST);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    case IBASE:{
      jj_consume_token(IBASE);
      break;
      }
    case OBASE:{
      jj_consume_token(OBASE);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BCLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4094050,0x4094050,0x4094050,0x8000,0x0,0x4084010,0x4084010,0x4084010,0x4084010,0x1000,0x40000,0x20000,0x80000,0x3f00000,0x3f00000,0x0,0x800,0x800,0x4004010,0xc000000,0xc000000,0x70000000,0x70000000,0x80000000,0x4000000,0x0,0x4010,0x10,0x4010,0x4084010,0x100,0x10,0x4084010,0x0,0x1000,0x100,0x100,0x4000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x77bfff03,0x77bfff03,0x75bfff03,0x0,0x400000,0xfff03,0xfff03,0xfff03,0xfff03,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xfc,0xff,0xfff03,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xfff03,0x0,0xfff00,0xfff03,0x0,0x0,0xfff03,0x8000000,0x0,0x0,0x0,0xb00,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xe0,0xe0,0xe0,0x0,0x0,0x60,0x60,0x60,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x60,0x60,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x40,};
   }

  /** Constructor with InputStream. */
  public BCLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BCLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BCLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BCLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BCLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
 token_source = new BCLangTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BCLang(BCLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BCLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

        }
